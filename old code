	// uncompressedPubKey, err := certification.PublicBLSKeyFromDER(a.GetRootKey())

	// var X []byte
	// a0 := uncompressedPubKey.X.A0.Bytes()
	// a1 := uncompressedPubKey.X.A1.Bytes()
	// X = append(X, a0[:]...)
	// X = append(X, a1[:]...)

	// var Y []byte
	// b0 := uncompressedPubKey.Y.A0.Bytes()
	// b1 := uncompressedPubKey.Y.A1.Bytes()

	// Y = append(Y, b0[:]...)
	// Y = append(Y, b1[:]...)

	// var uncompressedPubKeyRaw []byte
	// uncompressedPubKeyRaw = append(uncompressedPubKeyRaw, X...)
	// uncompressedPubKeyRaw = append(uncompressedPubKeyRaw, Y...)
	// fmt.Println()
	// uncompressedPubKey.X.String()
	// uncompressedPubKey.X.A0.Bytes()
	// x := strings.ReplaceAll(uncompressedPubKey.X.String(), "+", "")
	// x = strings.ReplaceAll(x, "*", "")
	// x = strings.ReplaceAll(x, "u", "")

	// y := strings.ReplaceAll(uncompressedPubKey.Y.String(), "+", "")
	// y = strings.ReplaceAll(y, "*", "")
	// y = strings.ReplaceAll(y, "u", "")
	// g2111 := blscircl.G2Generator()
	// fmt.Println(g2111.Bytes())
	// fmt.Println("X:", x)
	// fmt.Println("Y:", y)
	// xpointBytes, err := hex.DecodeString(x)
	// if err != nil {
	// 	log.Fatal(err)
	// }

	// ypointBytes, err := hex.DecodeString(y)
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// bls.PublicKeyFromBytes()

	// var concati []byte
	// concati = append(concati, xpointBytes...)
	// concati = append(concati, ypointBytes...)
	// fmt.Println("concati:", len(concati))
	// pubKey, err := blsSignatures.PublicKeyFromBytes(append([]byte{0}, concati...), true)
	// if err != nil {
	// 	return nil, err
	// }
	// fmt.Println("root key is", pubKey)
	// fmt.Println("root key2 is", blsSignatures.NewPublicKey())
	// g2priv := bls12381.NewG2()
	// privKey, err := cryptorand.Int(cryptorand.Reader, g2priv.Q())

	// pubKey := &bls12381.PointG2{}
	// g2pub := bls12381.NewG2()
	// g2pub.MulScalar(pubKey, g2pub.One(), privKey)
	// g2 := bls12381.NewG2()
	// fmt.Println(certification.PublicBLSKeyToDER(g2.ToBytes(pubKey)[:96]))

	// ////
	// rootKeyyOther, err := blsSignatures.PublicKeyFromBytes(PublicKeyFromBytes)
	// if err != nil {
	// 	return nil, err
	// }

	// rootKeyy, err := certification.PublicBLSKeyFromDER(a.GetRootKey())
	// if err != nil {
	// 	return nil, err
	// }

	// rootKeyy.Y.A0.

	func PublicBLSKeyFromDER(der []byte) ([]byte, error) {
		var seq asn1.RawValue
		if _, err := asn1.Unmarshal(der, &seq); err != nil {
			return nil, err
		}
		if seq.Tag != asn1.TagSequence {
			return nil, fmt.Errorf("invalid tag: %d", seq.Tag)
		}
		var idSeq asn1.RawValue
		rest, err := asn1.Unmarshal(seq.Bytes, &idSeq)
		if err != nil {
			return nil, err
		}
		var bs asn1.BitString
		if _, err := asn1.Unmarshal(rest, &bs); err != nil {
			return nil, err
		}
		if bs.BitLength != 96*8 {
			return nil, fmt.Errorf("invalid bit string length: %d", bs.BitLength)
		}
		var algoId asn1.ObjectIdentifier
		seqRest, err := asn1.Unmarshal(idSeq.Bytes, &algoId)
		if err != nil {
			return nil, err
		}
		if !algoId.Equal(asn1.ObjectIdentifier{1, 3, 6, 1, 4, 1, 44668, 5, 3, 1, 2, 1}) {
			return nil, fmt.Errorf("invalid algorithm identifier: %v", algoId)
		}
		var curveID asn1.ObjectIdentifier
		if _, err := asn1.Unmarshal(seqRest, &curveID); err != nil {
			return nil, err
		}
		if !curveID.Equal(asn1.ObjectIdentifier{1, 3, 6, 1, 4, 1, 44668, 5, 3, 2, 1}) {
			return nil, fmt.Errorf("invalid curve identifier: %v", curveID)
		}

		return bs.Bytes, err
	}